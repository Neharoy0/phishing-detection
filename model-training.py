# -*- coding: utf-8 -*-
"""phishing_detection_final??.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16vBq_Yo2c4sEqF5mWKqPWvva8yroXarZ
"""

import pandas as pd

from google.colab import drive

drive.mount('/content/drive')

#Use Phishing_Email dataset
df = pd.read_csv(r"/content/drive/MyDrive/Capstone/new_model3/final_cleaned_emails.csv")
df

# Keep only the two columns you want
df = df[['email_text', 'label']]

# Save the reduced dataset
df.to_csv("/content/drive/MyDrive/Capstone/new_model3/final_cleaned_emails.csv", index=False)

# Shuffle the rows
df_shuffled = df.sample(frac=1, random_state=42).reset_index(drop=True)

# Save the shuffled dataset
df_shuffled.to_csv("/content/drive/MyDrive/Capstone/new_model3/final_cleaned_dataset.csv", index=False)

df = pd.read_csv(r"/content/drive/MyDrive/Capstone/new_model3/final_cleaned_dataset.csv")

import torch
import pandas as pd
from transformers import BertTokenizer, BertModel

# Step 1: Load cleaned data
df = pd.read_csv(r"/content/drive/MyDrive/Capstone/new_model3/final_cleaned_dataset.csv", encoding='utf-8', engine='python')

# Step 2: Load BERT tokenizer and model
tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")
bert_model = BertModel.from_pretrained("bert-base-uncased")
bert_model.eval()

# Step 3: Move model to GPU if available
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
bert_model.to(device)

# Step 4: Tokenize all text and collect input_ids and attention_mask
input_ids_list = []
attention_mask_list = []

for text in df['email_text']:
    if pd.isna(text):
        text = ""
    encoded = tokenizer(
        text,
        padding='max_length',
        truncation=True,
        max_length=512,
        return_tensors="pt"
    )
    input_ids_list.append(encoded['input_ids'].squeeze(0))
    attention_mask_list.append(encoded['attention_mask'].squeeze(0))

# Step 5: Convert lists to tensors
input_ids = torch.stack(input_ids_list).to(device)
attention_masks = torch.stack(attention_mask_list).to(device)

# Step 6: Batchwise embedding generation
batch_size = 32
bert_embeddings = []

@torch.no_grad()
def get_bert_embeddings(input_ids, attention_mask):
    outputs = bert_model(input_ids=input_ids, attention_mask=attention_mask)
    cls_embedding = outputs.last_hidden_state[:, 0, :]  # [CLS] token
    return cls_embedding

for i in range(0, len(input_ids), batch_size):
    batch_input_ids = input_ids[i:i+batch_size]
    batch_attention_masks = attention_masks[i:i+batch_size]
    batch_embeddings = get_bert_embeddings(batch_input_ids, batch_attention_masks)
    bert_embeddings.append(batch_embeddings.cpu())

# Step 7: Combine & save
bert_embeddings = torch.cat(bert_embeddings)
df_embeddings = pd.DataFrame(bert_embeddings.numpy())

df_embeddings.to_csv("/content/drive/MyDrive/Capstone/new_model3/bert_embeddings.csv", index=False)
print("✅ Saved BERT embeddings to 'bert_embeddings.csv'")

import pandas as pd

# Load the BERT embeddings from the CSV file
bert_embeddings_df = pd.read_csv('/content/drive/MyDrive/Capstone/new_model3/bert_embeddings.csv')

# Check the shape and content to ensure it's loaded correctly
print(bert_embeddings_df.shape)
print(bert_embeddings_df.head())

import torch

# Assuming the dataframe contains the embeddings as columns
bert_embeddings = torch.tensor(bert_embeddings_df.values, dtype=torch.float32)

print(bert_embeddings.shape)

final_df = pd.read_csv(r"/content/drive/MyDrive/Capstone/new_model3/final_dataset.csv")
final_df

bert_embeddings_df = pd.read_csv('/content/drive/MyDrive/Capstone/new_model3/bert_embeddings.csv')
bert_embeddings_df

# Assuming that the order of rows in both DataFrames (final_df and bert_embeddings_df) matches
# Merge the label column from final_df with the embeddings DataFrame

final_df['label'] = final_df['label'].astype(int)  # Ensure the labels are integers

# Concatenate the embeddings and labels side by side
combined_df = pd.concat([bert_embeddings_df, final_df['label']], axis=1)

# Check the result
print(combined_df.head())

# Save the combined dataset (BERT embeddings + labels)
combined_df.to_csv("/content/drive/MyDrive/Capstone/new_model3/combined_bert_embeddings_with_labels.csv", index=False)

print("✅ Combined dataset saved as 'combined_bert_embeddings_with_labels.csv'")

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import shap

# Load processed dataset from CSV
df = pd.read_csv("/content/drive/MyDrive/Capstone/new_model3/combined_bert_embeddings_with_labels.csv")

# Separate features and labels
X = torch.tensor(df.drop('label', axis=1).values, dtype=torch.float32)
y = torch.tensor(df['label'].values, dtype=torch.long)

# Split dataset
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Create DataLoaders
train_loader = DataLoader(TensorDataset(X_train, y_train), batch_size=32, shuffle=True)
val_loader = DataLoader(TensorDataset(X_val, y_val), batch_size=32)

# Define CNN Model for 1D embeddings
class EmailCNN(nn.Module):
    def __init__(self, input_dim, num_classes):
        super(EmailCNN, self).__init__()
        self.conv1 = nn.Conv1d(in_channels=1, out_channels=128, kernel_size=3, padding=1)
        self.conv2 = nn.Conv1d(in_channels=128, out_channels=64, kernel_size=3, padding=1)
        self.patch_norm = nn.BatchNorm1d(64)  # patch normalization
        self.pool = nn.MaxPool1d(kernel_size=2, stride=2)

        self.fc1 = nn.Linear(64 * (input_dim // 4), 128)
        self.dropout = nn.Dropout(0.3)
        self.fc2 = nn.Linear(128, num_classes)

    def forward(self, x):
        x = x.unsqueeze(1)  # shape: [batch, 1, seq_len]
        x = self.pool(torch.relu(self.conv1(x)))                     # shape: [batch, 128, seq_len/2]
        x = self.patch_norm(self.pool(torch.relu(self.conv2(x))))    # shape: [batch, 64, seq_len/4]
        x = x.view(x.size(0), -1)                                     # flatten
        x = torch.relu(self.fc1(x))
        x = self.dropout(x)
        x = self.fc2(x)
        return x

# Initialize model, loss, and optimizer
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = EmailCNN(input_dim=X.shape[1], num_classes=2).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adagrad(model.parameters(), lr=0.01)

# Training loop
for epoch in range(10):
    model.train()
    total_loss = 0
    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()
    print(f"Epoch {epoch+1}, Loss: {total_loss/len(train_loader):.4f}")

from sklearn.metrics import classification_report, accuracy_score

# Evaluation
model.eval()
all_preds = []
all_labels = []

with torch.no_grad():
    for inputs, labels in val_loader:
        inputs = inputs.to(device)
        outputs = model(inputs)
        _, predicted = torch.max(outputs, 1)
        all_preds.extend(predicted.cpu().numpy())
        all_labels.extend(labels.numpy())

# Accuracy
val_accuracy = accuracy_score(all_labels, all_preds)
print(f"\nValidation Accuracy: {val_accuracy * 100:.2f}%")

# Full classification report
print("\nClassification Report:")
print(classification_report(all_labels, all_preds, target_names=["Ham", "Phishing"]))


# Save the trained model
torch.save(model.state_dict(), "email_cnn_model.pt")
print("Model saved as email_model.pt")

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Confusion matrix
cm = confusion_matrix(all_labels, all_preds)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["Ham", "Phishing"])

# Plot
plt.figure(figsize=(6, 5))
disp.plot(cmap='Blues', values_format='d')
plt.title("Confusion Matrix")
plt.grid(False)
plt.show()

torch.save(model, "full_model.pt")